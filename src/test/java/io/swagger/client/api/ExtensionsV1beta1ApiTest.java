/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1Patch;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1Status;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1WatchEvent;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetList;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1Deployment;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentList;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentRollback;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1Ingress;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1IngressList;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyList;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetList;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1Scale;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1ThirdPartyResource;
import io.swagger.client.model.IoK8sKubernetesPkgApisExtensionsV1beta1ThirdPartyResourceList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExtensionsV1beta1Api
 */
@Ignore
public class ExtensionsV1beta1ApiTest {

    private final ExtensionsV1beta1Api api = new ExtensionsV1beta1Api();

    
    /**
     * 
     *
     * create a DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExtensionsV1beta1NamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet response = api.createExtensionsV1beta1NamespacedDaemonSet(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExtensionsV1beta1NamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment response = api.createExtensionsV1beta1NamespacedDeployment(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create rollback of a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExtensionsV1beta1NamespacedDeploymentRollbackTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentRollback body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentRollback response = api.createExtensionsV1beta1NamespacedDeploymentRollback(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create an Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExtensionsV1beta1NamespacedIngressTest() throws ApiException {
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress response = api.createExtensionsV1beta1NamespacedIngress(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExtensionsV1beta1NamespacedNetworkPolicyTest() throws ApiException {
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy response = api.createExtensionsV1beta1NamespacedNetworkPolicy(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExtensionsV1beta1NamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet response = api.createExtensionsV1beta1NamespacedReplicaSet(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExtensionsV1beta1ThirdPartyResourceTest() throws ApiException {
        IoK8sKubernetesPkgApisExtensionsV1beta1ThirdPartyResource body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ThirdPartyResource response = api.createExtensionsV1beta1ThirdPartyResource(body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1CollectionNamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1CollectionNamespacedDaemonSet(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1CollectionNamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1CollectionNamespacedDeployment(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1CollectionNamespacedIngressTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1CollectionNamespacedIngress(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1CollectionNamespacedNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1CollectionNamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1CollectionNamespacedReplicaSet(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1CollectionThirdPartyResourceTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1CollectionThirdPartyResource(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1NamespacedDaemonSet(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1NamespacedDeployment(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1NamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1NamespacedIngress(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1NamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1NamespacedNetworkPolicy(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1NamespacedReplicaSet(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExtensionsV1beta1ThirdPartyResourceTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteExtensionsV1beta1ThirdPartyResource(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExtensionsV1beta1APIResourcesTest() throws ApiException {
        IoK8sApimachineryPkgApisMetaV1APIResourceList response = api.getExtensionsV1beta1APIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1DaemonSetForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetList response = api.listExtensionsV1beta1DaemonSetForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1DeploymentForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentList response = api.listExtensionsV1beta1DeploymentForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1IngressForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1IngressList response = api.listExtensionsV1beta1IngressForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1NamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSetList response = api.listExtensionsV1beta1NamespacedDaemonSet(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1NamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DeploymentList response = api.listExtensionsV1beta1NamespacedDeployment(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1NamespacedIngressTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1IngressList response = api.listExtensionsV1beta1NamespacedIngress(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1NamespacedNetworkPolicyTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyList response = api.listExtensionsV1beta1NamespacedNetworkPolicy(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1NamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetList response = api.listExtensionsV1beta1NamespacedReplicaSet(namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1NetworkPolicyForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyList response = api.listExtensionsV1beta1NetworkPolicyForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1ReplicaSetForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSetList response = api.listExtensionsV1beta1ReplicaSetForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExtensionsV1beta1ThirdPartyResourceTest() throws ApiException {
        String pretty = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ThirdPartyResourceList response = api.listExtensionsV1beta1ThirdPartyResource(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet response = api.patchExtensionsV1beta1NamespacedDaemonSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet response = api.patchExtensionsV1beta1NamespacedDaemonSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment response = api.patchExtensionsV1beta1NamespacedDeployment(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedDeploymentScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale response = api.patchExtensionsV1beta1NamespacedDeploymentScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment response = api.patchExtensionsV1beta1NamespacedDeploymentStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress response = api.patchExtensionsV1beta1NamespacedIngress(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress response = api.patchExtensionsV1beta1NamespacedIngressStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy response = api.patchExtensionsV1beta1NamespacedNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet response = api.patchExtensionsV1beta1NamespacedReplicaSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedReplicaSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale response = api.patchExtensionsV1beta1NamespacedReplicaSetScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet response = api.patchExtensionsV1beta1NamespacedReplicaSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified ReplicationControllerDummy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1NamespacedReplicationControllerDummyScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale response = api.patchExtensionsV1beta1NamespacedReplicationControllerDummyScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchExtensionsV1beta1ThirdPartyResourceTest() throws ApiException {
        String name = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ThirdPartyResource response = api.patchExtensionsV1beta1ThirdPartyResource(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet response = api.readExtensionsV1beta1NamespacedDaemonSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet response = api.readExtensionsV1beta1NamespacedDaemonSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment response = api.readExtensionsV1beta1NamespacedDeployment(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedDeploymentScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale response = api.readExtensionsV1beta1NamespacedDeploymentScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment response = api.readExtensionsV1beta1NamespacedDeploymentStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress response = api.readExtensionsV1beta1NamespacedIngress(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress response = api.readExtensionsV1beta1NamespacedIngressStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy response = api.readExtensionsV1beta1NamespacedNetworkPolicy(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet response = api.readExtensionsV1beta1NamespacedReplicaSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedReplicaSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale response = api.readExtensionsV1beta1NamespacedReplicaSetScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet response = api.readExtensionsV1beta1NamespacedReplicaSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified ReplicationControllerDummy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1NamespacedReplicationControllerDummyScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale response = api.readExtensionsV1beta1NamespacedReplicationControllerDummyScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readExtensionsV1beta1ThirdPartyResourceTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ThirdPartyResource response = api.readExtensionsV1beta1ThirdPartyResource(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet response = api.replaceExtensionsV1beta1NamespacedDaemonSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1DaemonSet response = api.replaceExtensionsV1beta1NamespacedDaemonSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment response = api.replaceExtensionsV1beta1NamespacedDeployment(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedDeploymentScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale response = api.replaceExtensionsV1beta1NamespacedDeploymentScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Deployment response = api.replaceExtensionsV1beta1NamespacedDeploymentStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress response = api.replaceExtensionsV1beta1NamespacedIngress(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Ingress response = api.replaceExtensionsV1beta1NamespacedIngressStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicy response = api.replaceExtensionsV1beta1NamespacedNetworkPolicy(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet response = api.replaceExtensionsV1beta1NamespacedReplicaSet(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedReplicaSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale response = api.replaceExtensionsV1beta1NamespacedReplicaSetScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ReplicaSet response = api.replaceExtensionsV1beta1NamespacedReplicaSetStatus(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified ReplicationControllerDummy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1Scale response = api.replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceExtensionsV1beta1ThirdPartyResourceTest() throws ApiException {
        String name = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ThirdPartyResource body = null;
        String pretty = null;
        IoK8sKubernetesPkgApisExtensionsV1beta1ThirdPartyResource response = api.replaceExtensionsV1beta1ThirdPartyResource(name, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1DaemonSetListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1DaemonSetListForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1DeploymentListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1DeploymentListForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1IngressListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1IngressListForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedDaemonSet(name, namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedDaemonSetListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedDaemonSetList(namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedDeployment(name, namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedDeploymentListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedDeploymentList(namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedIngress(name, namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedIngressListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedIngressList(namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedNetworkPolicyTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedNetworkPolicy(name, namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedNetworkPolicyListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedNetworkPolicyList(namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedReplicaSet(name, namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NamespacedReplicaSetListTest() throws ApiException {
        String namespace = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NamespacedReplicaSetList(namespace, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of NetworkPolicy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1NetworkPolicyListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1NetworkPolicyListForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1ReplicaSetListForAllNamespacesTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1ReplicaSetListForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1ThirdPartyResourceTest() throws ApiException {
        String name = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1ThirdPartyResource(name, fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ThirdPartyResource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchExtensionsV1beta1ThirdPartyResourceListTest() throws ApiException {
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchExtensionsV1beta1ThirdPartyResourceList(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
