/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1LabelSelector;
import java.io.IOException;

/**
 * IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-16T15:42:22.208Z")
public class IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer {
  @SerializedName("namespaceSelector")
  private IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector = null;

  @SerializedName("podSelector")
  private IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector = null;

  public IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer namespaceSelector(IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector) {
    this.namespaceSelector = namespaceSelector;
    return this;
  }

   /**
   * Selects Namespaces using cluster scoped-labels.  This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.
   * @return namespaceSelector
  **/
  @ApiModelProperty(value = "Selects Namespaces using cluster scoped-labels.  This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.")
  public IoK8sApimachineryPkgApisMetaV1LabelSelector getNamespaceSelector() {
    return namespaceSelector;
  }

  public void setNamespaceSelector(IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector) {
    this.namespaceSelector = namespaceSelector;
  }

  public IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer podSelector(IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector) {
    this.podSelector = podSelector;
    return this;
  }

   /**
   * This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.
   * @return podSelector
  **/
  @ApiModelProperty(value = "This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.")
  public IoK8sApimachineryPkgApisMetaV1LabelSelector getPodSelector() {
    return podSelector;
  }

  public void setPodSelector(IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector) {
    this.podSelector = podSelector;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer ioK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer = (IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer) o;
    return Objects.equals(this.namespaceSelector, ioK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer.namespaceSelector) &&
        Objects.equals(this.podSelector, ioK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer.podSelector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespaceSelector, podSelector);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sKubernetesPkgApisExtensionsV1beta1NetworkPolicyPeer {\n");
    
    sb.append("    namespaceSelector: ").append(toIndentedString(namespaceSelector)).append("\n");
    sb.append("    podSelector: ").append(toIndentedString(podSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

