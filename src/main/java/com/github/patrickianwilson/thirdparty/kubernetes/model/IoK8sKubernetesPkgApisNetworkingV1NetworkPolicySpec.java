/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.patrickianwilson.thirdparty.kubernetes.model;

import java.util.Objects;
import com.github.patrickianwilson.thirdparty.kubernetes.model.IoK8sApimachineryPkgApisMetaV1LabelSelector;
import com.github.patrickianwilson.thirdparty.kubernetes.model.IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * NetworkPolicySpec provides the specification of a NetworkPolicy
 */
@ApiModel(description = "NetworkPolicySpec provides the specification of a NetworkPolicy")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-17T08:08:12.703-08:00")
public class IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec {
  @SerializedName("ingress")
  private List<IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule> ingress = null;

  @SerializedName("podSelector")
  private IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector = null;

  public IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec ingress(List<IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule> ingress) {
    this.ingress = ingress;
    return this;
  }

  public IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec addIngressItem(IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule ingressItem) {
    if (this.ingress == null) {
      this.ingress = new ArrayList<IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule>();
    }
    this.ingress.add(ingressItem);
    return this;
  }

   /**
   * List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod&#39;s local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
   * @return ingress
  **/
  @ApiModelProperty(value = "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)")
  public List<IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule> getIngress() {
    return ingress;
  }

  public void setIngress(List<IoK8sKubernetesPkgApisNetworkingV1NetworkPolicyIngressRule> ingress) {
    this.ingress = ingress;
  }

  public IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec podSelector(IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector) {
    this.podSelector = podSelector;
    return this;
  }

   /**
   * Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
   * @return podSelector
  **/
  @ApiModelProperty(required = true, value = "Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.")
  public IoK8sApimachineryPkgApisMetaV1LabelSelector getPodSelector() {
    return podSelector;
  }

  public void setPodSelector(IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector) {
    this.podSelector = podSelector;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec ioK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec = (IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec) o;
    return Objects.equals(this.ingress, ioK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec.ingress) &&
        Objects.equals(this.podSelector, ioK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec.podSelector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ingress, podSelector);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sKubernetesPkgApisNetworkingV1NetworkPolicySpec {\n");
    
    sb.append("    ingress: ").append(toIndentedString(ingress)).append("\n");
    sb.append("    podSelector: ").append(toIndentedString(podSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

